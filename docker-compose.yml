version: '3.8'

services:
  # Eureka Server
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      - eureka-server
    ports:
      - "8080:8080"
    networks:
      - microservices-network

  # Shared PostgreSQL Database
  postgres-product:
    image: postgres:latest
    container_name: postgres-product
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Product Service
  product-service:
    build: ./product-service
    container_name: product-service
    depends_on:
      postgres-product:
        condition: service_healthy
      eureka-server:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-product:5432/productdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8081:8081"
    networks:
      - microservices-network

  # Customer Service
  postgres-customer:
    image: postgres:latest
    container_name: postgres-customer
    environment:
      POSTGRES_DB: customerdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres-customer-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-service:
    build: ./customer-service
    container_name: customer-service
    depends_on:
      postgres-customer:
        condition: service_healthy
      eureka-server:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-customer:5432/customerdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8082:8082"
    networks:
      - microservices-network

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    depends_on:
      postgres-product:
        condition: service_healthy
      product-service:
        condition: service_started
      customer-service:
        condition: service_started
      eureka-server:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-product:5432/productdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8083:8083"
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-product-data:
  postgres-customer-data: 